var express = require('express'),
	app = express(),
	fs = require('fs'),
	server = require('http').createServer(app),
	io = require('socket.io').listen(server),
	mongoose = require('mongoose'),
	users = {};
	
server.listen(3000);

mongoose.connect('mongodb://localhost/chat', function(err) {
	if(err) {
		console.lod(err);
	} else {
		console.log('connected to mongodb!');
	}
});

var chatSchema = mongoose.Schema({
	//name: {first: String, last: String},
	nick: String,
	msg: String,
	created: {type: Date, default: Date.now}
});
//create a collection inside of your database
var Chat = mongoose.model('Message', chatSchema);


app.get('/', function(req, res){
	res.sendFile(__dirname + '/index.html');
});

io.sockets.on('connection', function(socket){
	Chat.find(function(err, docs){
		if(err) throw err;
		console.log('Sending old messages');
		socket.emit('load old messages', docs);
	});
	socket.on('new user', function(data, callback){
		if (data in users){
			callback(false);
		} else{
			callback(true);
			socket.nickname = data;
			users[socket.nickname] = socket;
			updateNicknames();
		}
	});
	
	function updateNicknames(){
		io.sockets.emit('usernames', Object.keys(users));
	}

	socket.on('send message', function(data, callback){
		var msg = data.trim();
		//console.log('after trimming message is: ' + msg);
		if(msg.substr(0,3) === '/w '){
			msg = msg.substr(3);
			var ind = msg.indexOf(' ');
			if(ind !== -1){
				var name = msg.substring(0, ind);
				var msg = msg.substring(ind + 1);
				if(name in users){
					users[name].emit('whisper', {msg: msg, nick: socket.nickname});
					console.log('message sent is: ' + msg);
					console.log('Whisper!');
				} else{
					callback('Error!  Enter a valid user.');
				}
			} else{
				callback('Error!  Please enter a message for your whisper.');
			}
		} else{
			var newMsg = new Chat({msg: msg, nick: socket.nickname});
			newMsg.save(function(err) {
				if(err) throw err;
				io.sockets.emit('new message', {msg: msg, nick: socket.nickname});
			});
			
		}
	});

	socket.on('send file path', function(data, callback){
		var path = data.trim();
		if(path.substr(0,3) === '/w '){
			path = path.substr(3);
			var ind = path.indexOf(' ');
			if(ind !== -1){
				var name = path.substring(0, ind);
				var actualPath = path.substring(ind + 1);
				var actualPath = actualPath.trim();
				if(name in users){
					console.log('file path recieved!!');
					console.log(actualPath);
					fs.readFile(actualPath, 'utf8', function(err, buf) {
					if(err) {
						console.log('File not Found');
						callback('File not found');
					} else {
						console.log(buf);
						users[name].emit('whisperfile',{file:buf, nick: socket.nickname});
						console.log('Whisper File Sent!');
					}
					});
				
				} else{
					callback('Error!  Enter a valid user.');
				}
			} else{
				callback('Error!  Please enter the valid path.');
			}
		} else {

			console.log(path);
			fs.readFile(path, 'utf8', function(err, buf) {
			if(err) {
				console.log('File not Found');
			} else {
				console.log(buf);
				io.sockets.emit('file',{file:buf, nick: socket.nickname});
				console.log('File Sent');
			}
			});
		}

	});
	
	socket.on('disconnect', function(data){
		if(!socket.nickname) return;
		delete users[socket.nickname];
		updateNicknames();
	});
});
